---
layout: post
title: 敏捷转型的3个阶段和教练的选择
---
#{{ page.title }}#
## 背景 ##

@Michael-李俊 在新浪微博上问了个好问题 “推行敏捷大概有哪几个阶段？对教练有哪些不同要求？” - <http://weibo.com/2477254141/zhmzQCSyQ>

在公司中，其他部门也经常问我类似的问题，正好一并做个解答，权作抛砖引玉，一起来讨论，且做免责声明。

我认为主要是三个步骤。

 1. 了解，起步：自己先找个小团队试试，然后参加培训，再尝试。
 2. 组织内启动敏捷团队：在一个产品深入尝试，自动化，CI跟上，同时了解Kanban、Lean等等。
 3. 组织架构变化来适应敏捷，端到端的变化，技术实践继续提高。

在这个后面就无所谓敏捷不敏捷了。

## 了解，起步 ##

了解和起步阶段，一般需要半年到一年左右来培养一些内部的敏捷爱好者，以便在后续阶段推广。

先看一些书，再挑一个小的团队自己尝试一些敏捷方法和实践，建议考虑Scrum框架，因为它是比较容易入手和适配到现有的流程中，而且相应的书也比较多。当然会有很多问题和挫折，逼着你去思考，想想为什么不行。

有了一肚子问题后，就可以参加CSM的专业培训了（至少我是非常认可的），那里你会得到一些答案和一些常见手段。

经济有限的，这一阶段多参加敏捷社区活动，也可以得到一些免费咨询，对提高敏捷知识极有帮助。

这个时候不是特别适合寻找敏捷教练，因为你还什么都不懂，不太知道什么才是适合你的。不过可以参加敏捷咨询公司提供的培训，和敏捷教练们互相了解，看看是否能够开始提供一些指导。

多看书，多实践是这一步骤的关键。而且内心不要轻易否定别人的经验。

## 组织内启动敏捷团队 ##

有了前一步骤的经验，就可以开始慢慢推广了。常见的变化是：

1. 布道敏捷：有先行者不断推动敏捷知识的传播，中级经理和主要人员都要参加专业的敏捷培训。程序员可以只要了解变化就可以了。
2. 建立起软件开发的敏捷实践：持续集成和自动化，测试驱动开发和单元测试，等等。
3. 在产品开发部门推广敏捷流程，扩散到全部团队，一般开发用Scrum，技术支撑和产品级项目管理用看板（Kanban），慢慢提升团队的自主性。
4. 先行者继续了解其他敏捷知识，精益（Lean）、看板、极限编程（XP）和他们的使用范围。


这时候的敏捷教练偏向于技术指导，团队建设和敏捷知识的传播，要相信他们的专业知识能确保敏捷不偏差。

## 组织架构变化来适应敏捷 ##

到这儿，就不是看这篇文章的人能决定的了，要开始伤筋动骨了。常见的变化是：

1. 端到端的精益思维，不仅仅是研发部门，要和市场部等其他一起考虑，研究什么是最薄弱、最要改善的地方，调动高层领导一起研究执行。
2. 需要重组一些部门来打破部门之间的界限，如按照多功能团队而不是特性来划分，扁平化的管理，授权团队。
3. 重新装修，去除隔板，多一些小会议室。提高团队沟通和凝聚力。

这个时候的敏捷教练要了解组织架构的演进和系统思考，而且大老板的支持和理解及其重要。

这个步骤基本不可逆，会有极大的阻力，没有前两步的知识和敏捷文化的基础，基本会走形，好自为之。

## 总结 ##

看似简单的三个阶段，一般要历时3-6年，特别是对一些大公司或者有好多历史产品的。因此真正能完成的还是很少。大多是没有耐性，而且没有好的敏捷教练的指导，做到半吊子就换领导了。

看你运气了。

## 推荐图书 ##

1. 硝烟中的Scrum和XP (Scrum and XP from the Trenches) <http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches>
2. 看板和Scrum——相得益彰 (Kanban and Scrum - making the most of both) <http://www.infoq.com/cn/minibooks/kanban-scrum-minibook-cn>
3. 精益和敏捷开发大型应用指南 (Scale Lean & Agile Development) <http://www.amazon.cn/dp/B00305HIXE>
4. 精益和敏捷开发大型应用实战 (Practices for Scaling Lean & Agile Development) <http://www.amazon.cn/dp/B004I6DWY8>
5. 持续集成:软件质量改进和风险降低之道 (Continuous Integration:Improving Software Quality and Reducing Risk) <http://www.amazon.cn/dp/B008AY9XCY/>
5. 持续交付:发布可靠软件的系统方法 (Continuous Delivery) <http://www.amazon.cn/dp/B005V9BB1M>
 