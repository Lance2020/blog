---
layout: post
title: 程序员的职业素养
---
#{{ page.title }}#
## 背景 ##

工作十几年，编程也已超过二十年，而且我也一直乐在其中，最近常被叫去在公司内部分享一些经验。主要是谈软件技艺（Software Craftsmanship）和如何做个优秀的程序员并且热爱这个行业。

我想这也是公司推动敏捷到一定阶段的必然产物，不仅要以人为本，更要以技术为本，否则还是什么软件公司。

私下里，好多同事也一直问我程序员的发展方向，很多人都觉得不当个管理者（manager）就没有前途，或者至少是个架构师。虽然国外有好多程序员编程可以到很大年纪，而且乐在其中，但是很多人觉得现在自己老被逼着干活，没有可能到那个地步。

实际上这就是我想聊聊的“程序员的职业素养”。


## 程序员的职业素养 ##

每人都有自己的见解，我理解的程序员的职业素养是：

1. 扎实的基本功，不断练习和提高。
2. 专业的态度对待人和事，要对自己的代码和承诺负责。
3. 要为自己的代码和工作骄傲和自豪，由此产生激情不断学习。

### 扎实的基本功，不断练习和提高 ###

软件技艺首先是要有扎实的软件开发的基本功，常见的算法，面向对象，UML等知识一定要有所了解。如果不是计算机专科毕业的，这方面会差一点，但还是可以弥补。

很多的理解要用不断编程来体会，一个写过10万行以上代码的人的对应用程序的感觉相信肯定比刚出大学的计算机本科的人好。

几年下来，你对编程的[S.O.L.I.D.类设计原则](http://www.aqee.net/s-o-l-i-d-class-design-principles/)一定会深有体会，这些要牢记在胸。

除了编程，软件工程方面的知识也有不断演练体会，持续集成，结对编程，测试驱动等等都有好多东西在里面，要不断实践体会，没有亲自尝试过半年一年的只会纸上谈兵。

时间一直不够，所以要用积极开放的态度对待软件开发任务，要不断磨练学会把任务分解直到天、小时、分钟。这样才能得到快速反馈，不断调整目标。同时也给自己增加信心。这就是ATDD/CI/TDD/结对编程想教你的。常见的问题是一个黄贴32小时，天天在做，像是很忙，实际后面是一团乱麻。

### 专业的态度对待人和事，要对自己的代码和承诺负责 ###

要敢于对其他人说“No”。周末参加一个微博上如何处理烂代码的讨论就发现，程序员总是认为领导（外企中带manager头衔）说得是不能变的，就算是错的，也只能发牢骚吐槽而已。实际上代码是你写的，当然你有发言权。如果想成长，要敢于说“No"。

敢于说No只是第一步，接下来如何说No是你开发生涯中不断磨练的技术。要让人明白No后面的道理以及对他的影响。对程序员来说，常见情况就是说清楚项目的时间压力会影响到代码质量和客户的满意度，对将来的维护成本的提高。No不仅需要扎实的技术还要学会沟通技巧

实际上说Yes更难，它是一种承诺，需要较高的专业技术和分析能力给对方一个期待而不是惊讶。这和你的信用挂钩。最容易出问题的是说模凌两口的Yes：“大概、尽量、争取”，你觉得实际上不可能，给对方的感觉认为是可以，然后一堆的争吵。有素养的程序员要果断。

工作辛苦不等于专业！要考虑目标、价值和效率。好多码农上班加班加点写了好多代码，虽然BUG很多，觉得这样辛苦是好的表现。其实不然，质量高，解决问题最重要。有些团队年底得到“优秀奖”就是早期项目做烂了，客户骂了，然后猛加班。你见过吗？

要学会承担责任和后果。十年前我也被人这样骂过，才开始体会到了怎样才是专业。看看 <http://thread.gmane.org/gmane.linux.kernel/1413835/focus=1414106>

 要表里如一，严格要求自己。面试的时候，什么都会，什么都懂，头头是道。轮到自己真正做的时候：”这个我不会，要求先培训，项目时间要不多给点“，”我知道CI是要100%过，但我们有特殊原因，巴拉巴拉，尽力吧“。不会就要好好学，多钻研，少抱怨，这样才能快速成长。

### 要为自己的代码和工作骄傲和自豪，由此产生激情不断学习 ###

另一方面，对大多数码农来说，学会放弃也是一种境界。退一步海阔天空，别硬撑。

## 总结 ##

讲了那么多，可能还有人问，“那为什么要提高这些素养呢，混混不蛮好嘛 ？”

1. 这是你区别机器人和打字员的地方。
2. 这是让你工资比别人多的

还是不想改变，没问题，那是你自己的选择，我还是爱我的程序人生。

## 推荐图书 ##

1. 程序员的职业素养 (The Clean Coder) <http://www.ituring.com.cn/book/838>
2. 代码整洁之道 (Clean Code) <http://book.douban.com/subject/4199741/>
 
 